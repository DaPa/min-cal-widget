apply plugin: 'com.android.application'
apply plugin: 'pmd'
apply plugin: 'checkstyle'

def hasSigningStoreFile = project.hasProperty('signingStoreFile')
def hasSigningStorePassword = project.hasProperty('signingStorePassword')
def hasSigningKeyAlias = project.hasProperty('signingKeyAlias')
def hasSigningKeyPassword = project.hasProperty('signingKeyPassword')

android {

    compileSdkVersion 29
    buildToolsVersion '28.0.3'

    defaultConfig {

        applicationId "cat.mvmike.minimalcalendarwidget"
        minSdkVersion 26    // 8.0
        targetSdkVersion 29 // 10.0
        versionCode 19
        versionName "1.3.0"

        multiDexEnabled true
    }

    /*
     * To sign release builds, create the file gradle.properties in
     * ~/.gradle/ with this content:
     *
     * signingStoreFile=key.store
     * signingStorePassword=xxx
     * signingKeyAlias=alias
     * signingKeyPassword=xxx
     */
    if (hasSigningStoreFile
            && hasSigningStorePassword
            && hasSigningKeyAlias
            && hasSigningKeyPassword) {

        println "Found sign properties in gradle.properties! Signing buildâ€¦"
        signingConfigs {
            release {
                storeFile file(signingStoreFile)
                storePassword signingStorePassword
                keyAlias signingKeyAlias
                keyPassword signingKeyPassword
            }
        }
        buildTypes.release.signingConfig = signingConfigs.release
    } else {
        buildTypes.release.signingConfig = null
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError true
    }

    compileOptions {
        compileOptions.encoding = "UTF-8"

        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            def buildType = variant.variantData.variantConfiguration.buildType.name
            outputFileName = new File("min-cal-widget-" + buildType + ".apk")
        }
    }

    testOptions {
        unitTests.all {
            useJUnitPlatform()
        }
    }
}

// https://developer.android.com/topic/libraries/support-library/packages.html
dependencies {
    implementation 'androidx.multidex:multidex:2.0.0'
    implementation 'androidx.appcompat:appcompat:1.0.0'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.1.1'
    testImplementation 'org.mockito:mockito-core:2.23.0'
}

// https://pmd.github.io/
pmd {
    toolVersion = '6.9.0'
    consoleOutput = true
}

task pmdMain(type: Pmd, dependsOn: "assembleDebug") {
    ruleSetFiles = files("${project.rootDir}/config/pmd/rules.xml")
    ruleSets = [] // otherwise defaults clash with the list in rules.xml
    source 'src/main/java'
    include '**/*.java'
}

task pmd(dependsOn: [pmdMain]) {}

// http://checkstyle.sourceforge.net
checkstyle {
    toolVersion = '8.14'
}

task checkstyle(type: Checkstyle) {
    configFile file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    source 'src/main/java'
    include '**/*.java'

    classpath = files()
}